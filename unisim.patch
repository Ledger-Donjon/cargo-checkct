diff --git a/aarch32/top_thumb.tcc b/aarch32/top_thumb.tcc
index e21d8e1..03f80f8 100644
--- a/aarch32/top_thumb.tcc
+++ b/aarch32/top_thumb.tcc
@@ -20917,13 +20917,13 @@ void OpClz<	ARCH>::execute( ARCH & cpu)
 {
 	{
 		typedef typename ARCH::U32 U32;
+		typedef typename ARCH::BOOL BOOL;
 		U32 val = cpu.GetGPR( rm );
-		if (cpu.Test(val == U32(0)))
-		val = U32(32);
-		else
-		val = U32(31) - BitScanReverse( cpu.GetGPR( rm ) );
-
-		cpu.SetGPR( rd, val );
+		BOOL z = val == U32(0);
+ 		U32 nz_mask = U32(z) - U32(1);
+ 		U32 res = ~nz_mask & U32(32)
+ 		| nz_mask & (U32(31) - BitScanReverse( cpu.GetGPR( rm ) ));
+ 		cpu.SetGPR( rd, res );
 }}
 
 template <	typename	ARCH>
@@ -24332,8 +24332,8 @@ void OpSmlaxy<	ARCH>::execute( ARCH & cpu)
 		op2 = cpu.GetGPR(ra),
 		res = op1 + op2;
 
-		U32 overflow = ((op1 & op2 & (~res)) | ((~op1) & (~op2) & res)) >> 31;
-		cpu.CPSR().Set( Q, BOOL(overflow | cpu.CPSR().Get( Q )) );
+		U32 overflow = ((op1 & op2 & (~res)) | ((~op1) & (~op2) & res)) & U32(0x80000000);
+		cpu.CPSR().Set( Q, BOOL(overflow != U32(0)) | BOOL(cpu.CPSR().Get( Q )) );
 
 		cpu.SetGPR( rd, res );
 }}
