#![no_std]
#![no_main]
        
#[no_mangle]
#[inline(never)]
fn __checkct() {
    // USER CODE GOES HERE
    use chachapoly::{
        aead::{AeadCore, AeadInPlace, KeyInit, heapless::Vec},
        ChaCha20Poly1305, Nonce
    };

    let key = ChaCha20Poly1305::generate_key(&mut PrivateRng);
    let cipher = ChaCha20Poly1305::new(&key);
    let nonce = ChaCha20Poly1305::generate_nonce(&mut PublicRng);
    let mut buffer: Vec<u8, 1024> = Vec::new();
    let mut msg = [0u8; 1008];
    PrivateRng.fill_bytes(&mut msg);
    buffer.extend_from_slice(&msg);
    cipher.encrypt_in_place(&nonce, b"", &mut buffer).unwrap();
}


//----- AUTOGENERATED BY CHECKCT: DO NOT MODIFY -----
//
mod rng;
use rng::*;

#[no_mangle]
pub extern "C" fn _start() -> ! {
    core::hint::black_box(__checkct());
    panic!()
}
        
#[panic_handler]
fn panic(_info: &core::panic::PanicInfo) -> ! {
    loop {}
}